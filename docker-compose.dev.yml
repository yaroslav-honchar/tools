services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: frontend-dev
    ports:
      - "4040:4040"
    env_file:
      - ./apps/frontend/.env
    volumes:
      - .:/app
      - /app/node_modules
      - /app/apps/frontend/node_modules
      - /app/apps/backend/node_modules
      - /app/packages/eslint-config-custom/node_modules
    depends_on:
      - backend
      - postgres
    networks:
      - dev-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: backend-dev
    ports:
      - "8080:8080"
    env_file:
      - ./apps/backend/.env
    volumes:
      - .:/app
      - /app/node_modules
      - /app/apps/frontend/node_modules
      - /app/apps/backend/node_modules
      - /app/packages/eslint-config-custom/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dev-network

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=dev_tools
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dev_tools"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - dev-network

volumes:
  postgres_data:

networks:
  dev-network:
    driver: bridge
